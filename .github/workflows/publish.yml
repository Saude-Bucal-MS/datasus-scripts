name: Publish Docker image to GHCR

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (ex: v1.2.3). If empty, short SHA will be used."
        required: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image name and tag
        id: meta
        env:
          REPO: ${{ github.repository }}
          REF: ${{ github.ref }}
          SHA: ${{ github.sha }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${REPO}"
          SHORT_SHA=${SHA::7}
          TAG=""
          IS_RELEASE=false

          # 1) explicit input (manual run)
          if [[ -n "${INPUT_TAG:-}" ]]; then
            TAG="${INPUT_TAG}"
            IS_RELEASE=true
          # 2) tag push
          elif [[ "${REF}" == refs/tags/* ]]; then
            TAG=${REF#refs/tags/}
            IS_RELEASE=true
          else
            # fallback to immutable short sha
            TAG="${SHORT_SHA}"
            IS_RELEASE=false
          fi

          # Build tags list (JSON array). Always include immutable short-sha tag.
          if [[ "${IS_RELEASE}" == "true" ]]; then
            # release: include the supplied/tag name, the short sha and latest
            TAGS_JSON=$(printf '["%s:%s","%s:%s","%s:latest"]' "${IMAGE}" "${TAG}" "${IMAGE}" "${SHORT_SHA}" "${IMAGE}" )
          else
            # non-release: only publish immutable short sha
            TAGS_JSON=$(printf '["%s:%s"]' "${IMAGE}" "${SHORT_SHA}")
          fi

          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "tags_json=${TAGS_JSON}" >> $GITHUB_OUTPUT

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ fromJson(steps.meta.outputs.tags_json) }}
